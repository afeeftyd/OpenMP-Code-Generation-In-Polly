Title
-----

Implementing libpluto and integrating with Polly

Abstract
--------
PluTo is an automatic parallelizer and locality optimizer for multi-core
architectures. It lacks a library interface which can be used by other
tools like Polly. The proposal aims at implementing libpluto and integrating
it with Polly.

Existing System
---------------

Without having a dedicated library the current Pluto system works as follows

    * The source file is given to Clan(Chunky loop analyzer) to extract polyhedral
      intermediate representation(SCoP) from the source code.
    * The SCoP is converted into internal program representation of Pluto(PlutoProg).
    * The core scheduling algorithm of Pluto(pluto_auto_transform) is applied on
      this and a new schedule is obtained.
    * Perform optional tiling, vectorization and other optimizations.
    * Generate the code using cloog.

Polly makes use of Pluto optimizations with the Pluto version integrated into 
PoCC(Polyhedral Compiler Collection). While building Polly the user need to
download the complete source code of PoCC and compile it. Polly provides
options(-enable-pluto-tile, -enable-pluto-prevector) to get advantage of
Pluto optimizations. Polly internally makes a call to 'pocc' command with the 
corresponding options and with the exported scoplib input file which consists
of the polyhedral descriptions of the SCoPs detected by Polly.

Proposed system
----------------
The key part of Pluto is its core scheduling algorithm. As described above rest
of the part are other tools integrated into it. So its worth to extract it
out of the tool and implement that as a library. Other users who
need to take advantage of Pluto's scheduling can easily integrate this.

PoCC is too large to be integrated into Polly and LLVM. In addition the current
approach needs the polyhedral representation to be exported to a file. Creating
file for large number of scops may not be scalable and will result in huge overhead.

To use the Pluto optimizations directly in Polly, Pluto needs to be integrated
into Polly as a library(libpluto). I will contribute to implement libpluto and
integrate this with Polly.

Implementation Plan
-------------------

Phase 1: libpluto implementation
--------------------------------

* Interface design

  The Interface of libpluto should be minimal and simple. This needs to be discussed
  and we have to come up with a suitable interface. A tentative interface can
  be defined as follows.

   * Function name: similar to "pluto_auto_transform"
   * Input        : A single SCoP(essentially only Iteration domain and Dependences).
                    This need to be finalized.
   * Output       : A schedule

   * Function name: pluto_tile
   * Input        : Schedule(Output of pluto_auto_transform).
   * Output       : ?

   * Function name: pluto_prevector
   * Input        : Schedule(Output of pluto_auto_transform).
   * Output       : ?


Phase 2: Integration with Polly
-------------------------------

* Include libpluto as part of Polly build system.
* Implement a separate pass(LibPluto.cpp) for performing pluto optimizations which has
    * ScopInfo pass as a prerequisite.
    * Implement the driver functions which convert the ScoP representation
      of Polly into the input representation of libpluto.
    * Implement the driver function which convert the output(schedule) of
      libpluto back to ScoP representation of Polly.
* Create testcases to see the enhanced optimization.
* Compare the result with current implementation.
* How does libpluto benefit for vectorization ? (Add to time line)


Timeline
--------

* Interact with Pluto and Polly developers to finalize a suitable interface for
  libpluto (End of May)

* Implementing libpluto interface (End of June)

* Adding libpluto to Polly build system(July First week)

* Implement LibPluto Pass(July 2nd Week)

* Testing with some real benchmarks and fix bugs if any(August First week)

Benefits for LLVM
-----------------

* Polly will provide an advanced polyhedral optimizer, with already known
  benefits in respect of data-locality and parallelism.
* LLVM will be the first Open Source compiler (and after IBM XL C the second compiler at all)
  that implements such advanced transformations.
* The Pluto algorithm can be the base to expose even more SIMD parallelism
  and might be a great start for an advanced vectorizer.
* It may also be the base to support automatic offloading to the GPU

If Time Permits
---------------

About Me
----------

Currently I am a graduate student at Department of Computer Science at
Indian Institute of technology, Madras(http://www.cse.iitm.ac.in/).

Experience
----------

I am a developer for Polly and I have gained experience working in OpenMP
Parallel backend for Polly. This is almost stable now and is being tested
with the polybench benchmarks. And I have gone through the pluto code base
and understood the flow of the code.
